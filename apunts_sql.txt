** Basics **
# CREATE DATABASE nombre_base_datos
# show databases -> muestra las bd creadas.
# USE nombre_base_datos -> seleccionamos bd
# select database() -> indica que bd usamos.
** The World Of String Functions **
# http://webdev.slides.com/coltsteele/mysql-99-101#/
# CONCAT -> junta strings
# CHAR LENGTH -> cuenta los carácteres

** Logical operators **
# Case statements -> CASE WHEN ELSE END  Añadimos condicionales.

** One To Many **

CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
);

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
        ('George', 'Michael', 'gm@gmail.com'),
        ('David', 'Bowie', 'david@gmail.com'),
        ('Blue', 'Steele', 'blue@gmail.com'),
        ('Bette', 'Davis', 'bette@aol.com');
        
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
        ('2017/11/11', 35.50, 1),
        ('2014/12/12', 800.67, 2),
        ('2015/01/03', 12.50, 2),
        ('1999/04/11', 450.25, 5);

# Foreign key forzamos que las unicas id's validas son las que pertenecen a la relacion en este caso customers. La id 98 no seria valida en orders porque no tenemos ninguna id en custormers con el 98.

# Cross join
SELECT * FROM orders WHERE customer_id =
    (
        SELECT id FROM customers
        WHERE last_name='George'
    );

# Implicit inner join
SELECT * FROM customers, orders 
WHERE customers.id = orders.customer_id;

# Inner Join: Selecciona todos los registros de A y B donde coincida el condicional JOIN.

# Explicit inner joins
SELECT * FROM customers
JOIN orders
    ON customers.id = orders.customer_id;
    
SELECT first_name, last_name, order_date, amount 
FROM customers
JOIN orders
    ON customers.id = orders.customer_id;
    
SELECT *
FROM orders
JOIN customers
    ON customers.id = orders.customer_id;

SELECT 
    first_name, 
    last_name, 
    SUM(amount) AS total_spent
FROM customers
JOIN orders
    ON customers.id = orders.customer_id
GROUP BY orders.customer_id
ORDER BY total_spent DESC;

# Left join: Selecciona todo lo que hay en A, junto con cualquier registro coincidente en B. Muestra todos los registros de A aunque no tenga coincidencia con B.

SELECT * FROM customers
LEFT JOIN orders
    ON customers.id = orders.customer_id;

SELECT first_name, last_name, order_date, amount
FROM customers
LEFT JOIN orders
    ON customers.id = orders.customer_id; 

SELECT 
    first_name, 
    last_name,
    IFNULL(SUM(amount), 0) AS total_spent
FROM customers
LEFT JOIN orders
    ON customers.id = orders.customer_id
GROUP BY customers.id
ORDER BY total_spent;

# Right join: Selecciona todo lo que hay en B, junto con cualquier registro coincidente en A. Muestra todos los registros de B aunque no tenga coincidencia con A.

SELECT * FROM customers
RIGHT JOIN orders
    ON customers.id = orders.customer_id;

SELECT 
    IFNULL(first_name,'MISSING') AS first, 
    IFNULL(last_name,'USER') as last, 
    order_date, 
    amount, 
    SUM(amount)
FROM customers
RIGHT JOIN orders
    ON customers.id = orders.customer_id
GROUP BY first_name, last_name;

# Si queremos eliminar un registro de customers pero este esta relacionado con orders por el foreign key tenemos que declarar el foreign key como DELETE CASCADE . Ejemplo:

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) 
        REFERENCES customers(id)
        ON DELETE CASCADE
);

# No importa si primero añadimos orders y después customers o viceversa, el resultado es el mismo sólo varia que primero se muestra una información de una tabla y después la info. de la otra tabla dependiendo del orden.

SELECT * FROM orders
RIGHT JOIN customers
    ON customers.id = orders.customer_id;    

SELECT * FROM customers
RIGHT JOIN orders
    ON customers.id = orders.customer_id;

# Ejercicio

CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100)
);
    
CREATE TABLE papers (
    title VARCHAR(100),
    grade INT,
    student_id INT,
    FOREIGN KEY (student_id) 
        REFERENCES students(id)
        ON DELETE CASCADE
);

INSERT INTO students (first_name) VALUES 
('Caleb'), 
('Samantha'), 
('Raj'), 
('Carlos'), 
('Lisa');
    
INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

-- EXERCISE 1

SELECT first_name, title, grade
FROM students
INNER JOIN papers
    ON students.id = papers.student_id
ORDER BY grade DESC;

-- ALT SOLUTION

SELECT first_name, title, grade
FROM students
RIGHT JOIN papers
    ON students.id = papers.student_id
ORDER BY grade DESC;

-- PROBLEM 2

SELECT first_name, title, grade
FROM students
LEFT JOIN papers
    ON students.id = papers.student_id;

-- PROBLEM 3

SELECT
    first_name,
    IFNULL(title, 'MISSING'),
    IFNULL(grade, 0)
FROM students
LEFT JOIN papers
    ON students.id = papers.student_id;

    
-- PROBLEM 4

SELECT
    first_name,
    IFNULL(AVG(grade), 0) AS average
FROM students
LEFT JOIN papers
    ON students.id = papers.student_id
GROUP BY students.id
ORDER BY average DESC;

-- PROBLEM 5

SELECT first_name, 
        IFNULL(Avg(grade), 0) AS average, 
        CASE 
            WHEN Avg(grade) IS NULL THEN 'FAILING' 
            WHEN Avg(grade) >= 75 THEN 'PASSING' 
            ELSE 'FAILING' 
        END AS passing_status 
FROM students 
        LEFT JOIN papers 
                ON students.id = papers.student_id 
GROUP  BY students.id 
ORDER  BY average DESC;

** Many To Many **

# Creamos una tabla intermedia para conectar las dos tablas que son Many To Many.

CREATE TABLE reviewers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);

CREATE TABLE series(
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    released_year YEAR(4),
    genre VARCHAR(100)
);

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY(series_id) REFERENCES series(id),
    FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
 
 
INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');

INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);

-- TV Joins Challenge 1 SOLUTION

SELECT 
    title, 
    rating 
FROM series
JOIN reviews
    ON series.id = reviews.series_id;

-- Challenge 2 AVG rating

SELECT
    title,
    AVG(rating) as avg_rating
FROM series
JOIN reviews
    ON series.id = reviews.series_id
GROUP BY series.id
ORDER BY avg_rating;

-- CHALLENGE 3  - Two Solutions

SELECT
    first_name,
    last_name,
    rating
FROM reviewers
INNER JOIN reviews
    ON reviewers.id = reviews.reviewer_id;

SELECT
    first_name,
    last_name,
    rating
FROM reviews
INNER JOIN reviewers
    ON reviewers.id = reviews.reviewer_id;

-- CHALLENGE 4 - UNREVIEWED SERIES

SELECT title AS unreviewed_series
FROM series
LEFT JOIN reviews
    ON series.id = reviews.series_id
WHERE rating IS NULL;

-- Challenge 5 - GENRE AVG RATINGS

SELECT  genre, 
        Round(Avg(rating), 2) AS avg_rating 
FROM series 
    INNER JOIN reviews 
        ON series.id = reviews.series_id 
GROUP BY genre; 

-- CHALLENGE 6 - Reviewer Stats 

SELECT first_name, 
    last_name, 
    Count(rating)                               AS COUNT, 
    Ifnull(Min(rating), 0)                      AS MIN, 
    Ifnull(Max(rating), 0)                      AS MAX, 
    Round(Ifnull(Avg(rating), 0), 2)            AS AVG, 
    IF(Count(rating) > 0, 'ACTIVE', 'INACTIVE') AS STATUS 
FROM   reviewers 
    LEFT JOIN reviews 
            ON reviewers.id = reviews.reviewer_id 
GROUP  BY reviewers.id; 

-- CHALLENGE 6 - Reviewer Stats With POWER USERS 

SELECT first_name, 
        last_name, 
        Count(rating)                    AS COUNT, 
        Ifnull(Min(rating), 0)           AS MIN, 
        Ifnull(Max(rating), 0)           AS MAX, 
        Round(Ifnull(Avg(rating), 0), 2) AS AVG, 
        CASE 
            WHEN Count(rating) >= 10 THEN 'POWER USER' 
            WHEN Count(rating) > 0 THEN 'ACTIVE' 
            ELSE 'INACTIVE' 
        end                              AS STATUS 
FROM   reviewers 
        LEFT JOIN reviews 
                ON reviewers.id = reviews.reviewer_id 
GROUP  BY reviewers.id; 

-- CHALLENGE 7 - 3 TABLES!

SELECT 
    title,
    rating,
    CONCAT(first_name,' ', last_name) AS reviewer
FROM reviewers
INNER JOIN reviews 
    ON reviewers.id = reviews.reviewer_id
INNER JOIN series
    ON series.id = reviews.series_id
ORDER BY title;

** Instagram clone **
# Users
CREATE TABLE users (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

# Photos
CREATE TABLE photos (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    image_url VARCHAR(255) NOT NULL,
    user_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(user_id) REFERENCES users(id)
);

# Comments
CREATE TABLE comments (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    comment_text VARCHAR(255) NOT NULL,
    photo_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(photo_id) REFERENCES photos(id),
    FOREIGN KEY(user_id) REFERENCES users(id)
);

# Likes -> no podemos hacernos me gusta a nosotros mismos ni tampoco hacer mil me gustas de una foto.
# 1 - 1
CREATE TABLE likes (
    user_id INTEGER NOT NULL,
    photo_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(photo_id) REFERENCES photos(id),
    PRIMARY KEY(user_id, photo_id)
);

# Followers -> evitamos no seguirnos a nosotros mismos ni tampoco seguir dos veces al mismo.
CREATE TABLE follows (
    follower_id INTEGER NOT NULL,
    followee_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(follower_id) REFERENCES users(id),
    FOREIGN KEY(followee_id) REFERENCES users(id),
    PRIMARY KEY(follower_id, followee_id)
);

# Tags -> Evitamos repetir el mismo tag en la misma foto
CREATE TABLE tags (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    tag_name VARCHAR(255) UNIQUE,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE photo_tags (
    photo_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    FOREIGN KEY(photo_id) REFERENCES photos(id),
    FOREIGN KEY(tag_id) REFERENCES tags(id),
    PRIMARY KEY(photo_id, tag_id)
);

** Challenges **

-- 1. Finding 5 oldest users

SELECT * 
FROM users
ORDER BY created_at
LIMIT 5;

-- 2. Most Popular Registration Date
# DAYNAME devuelve el dia de la semana que pertenece

SELECT 
    DAYNAME(created_at) AS day,
    COUNT(*) AS total
FROM users
GROUP BY day
ORDER BY total DESC
LIMIT 2;

-- 3. Identify Inactive Users (users with no photos)

SELECT username
FROM users
LEFT JOIN photos
    ON users.id = photos.user_id
WHERE photos.id IS NULL;

-- 4. Identify most popular photo (and user who created it)

SELECT 
    username,
    photos.id,
    photos.image_url, 
    COUNT(*) AS total
FROM photos
INNER JOIN likes
    ON likes.photo_id = photos.id
INNER JOIN users
    ON photos.user_id = users.id
GROUP BY photos.id
ORDER BY total DESC
LIMIT 1;

-- 5. Calculate average number of photos per user

SELECT (SELECT Count(*) FROM photos) / (SELECT Count(*) FROM users) AS avg; 

-- 6. Find the five most popular hashtags

SELECT  
    tags.tag_name, 
    Count(*) AS total 
FROM photo_tags 
JOIN tags ON
    photo_tags.tag_id = tags.id 
GROUP BY tags.id 
ORDER BY total DESC 
LIMIT 5;

-- 7. Finding the bots - the users who have liked every single photo
# HAVING: Es como un where pero permite usarlo después de group by. Con where no podemos y tampoco podemos usar funciones. The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions. https://www.w3schools.com/sql/sql_having.asp

SELECT 
    username, 
    Count(*) AS num_likes 
FROM users 
INNER JOIN likes 
        ON users.id = likes.user_id 
GROUP BY likes.user_id 
HAVING num_likes = (SELECT Count(*) FROM photos);

** Triggers **
# Sintaxis

DELIMITER $$

CREATE TRIGGER trigger_name 
trigger_time trigger_event ON table_name FOR EACH ROW 
BEGIN 
    IF NEW. ...
    THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '...';
    END IF;
END;

$$

DELIMITER ;

-----

trigger_time -> BEFORE AFTER
trigger_event -> INSERT UPDATE DELETE
table_name -> Nombre de la tabla

-----

NEW. -> nuevos registros
OLD. -> registros antiguos 
SIGNAL SQLSTATE '...' -> es para describir el error
DELIMITER-> Donde empieza y termina el trigger

-----

SHOW TRIGGERS -> podemos ver los triggers que tenemos
DROP TRIGGER trigger_name -> eliminar un trigger


** NodeJS **

STEP 1: Install and Require Faker

// Install Faker via command line:
npm install faker 

// Require it inside of a JS file:
var faker = require('faker'); 

STEP 2: Use Faker!

// Print a random email
console.log(faker.internet.email()); 

// Print a random past date
console.log(faker.date.past()); 

// Print a random city
console.log(faker.address.city()); 

// We can define a new function
function generateAddress(){
    console.log(faker.address.streetAddress());
    console.log(faker.address.city());
    console.log(faker.address.state());
}

// And then execute that function:
generateAddress(); 

Step 1: Install the MySQL Node Package

npm install mysql 

Step 2: Connect to Database*

var mysql = require('mysql');  
var connection = mysql.createConnection({
    host     : 'localhost',
    user     : 'root',     // your root username
    database : 'join_us'   // the name of your db
});

Step 3: Run Queries

Running a super simple SQL query like:
SELECT 1 + 1;

Using the MySQL Node Package:

connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
    if (error) throw error;
    console.log('The solution is: ', results[0].solution);
});

Another sample query, this time selecting 3 things:

var q = 'SELECT CURTIME() as time, CURDATE() as date, NOW() as now';
connection.query(q, function (error, results, fields) {
    if (error) throw error;
    console.log(results[0].time);
    console.log(results[0].date);
    console.log(results[0].now);
});



